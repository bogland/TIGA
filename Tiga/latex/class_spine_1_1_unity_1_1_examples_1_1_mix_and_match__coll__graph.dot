digraph "Spine.Unity.Examples.MixAndMatch"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Spine.Unity.Examples.Mix\lAndMatch\n|+ templateAttachmentsSkin\l+ sourceMaterial\l+ visorSprite\l+ visorSlot\l+ visorKey\l+ gunSprite\l+ gunSlot\l+ gunKey\l+ repack\l+ runtimeAtlas\l+ runtimeMaterial\l|- OnValidate()\l- Start()\l- Apply()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{MonoBehaviour\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -customSkin" ,arrowhead="odiamond"];
  Node3 [label="{Spine.Skin\n|+ Name\l+ Attachments\l~ name\l- attachments\l|+ Skin()\l+ AddAttachment()\l+ GetAttachment()\l+ FindNamesForSlot()\l+ FindAttachmentsForSlot()\l+ ToString()\l~ AttachAll()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skin.html",tooltip="Stores attachments by slot index and attachment name."];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +bbFollower" ,arrowhead="odiamond"];
  Node4 [label="{Spine.Unity.BoundingBoxFollower\n|+ slotName\l+ isTrigger\l+ clearStateOnDisable\l+ colliderTable\l+ nameTable\l+ Slot\l+ CurrentAttachment\l+ CurrentAttachmentName\l+ CurrentCollider\l+ IsTrigger\l~ DebugMessages\l- currentAttachmentName\l- currentCollider\l|+ Initialize()\l+ ClearState()\l- Start()\l- OnEnable()\l- HandleRebuild()\l- AddSkin()\l- OnDisable()\l- DisposeColliders()\l- LateUpdate()\l- MatchAttachment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_bounding_box_follower.html",tooltip=" "];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -currentAttachment" ,arrowhead="odiamond"];
  Node5 [label="{Spine.BoundingBoxAttachment\n||+ BoundingBoxAttachment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_bounding_box_attachment.html",tooltip="Attachment that has a polygon for bounds checking."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{VertexAttachment\n|+ Id\l+ Bones\l+ Vertices\l+ WorldVerticesLength\l~ id\l~ bones\l~ vertices\l~ worldVerticesLength\l- nextID\l- nextIdLock\l|+ VertexAttachment()\l+ ComputeWorldVertices()\l+ ComputeWorldVertices()\l+ ApplyDeform()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_vertex_attachment.html",tooltip=">An attachment with vertices that are transformed by one or more bones and can be deformed by a slot'..."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{Attachment\n|+ Name\l|+ ToString()\l# Attachment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_attachment.html",tooltip=" "];
  Node8 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -slot" ,arrowhead="odiamond"];
  Node8 [label="{Spine.Slot\n|+ Data\l+ Bone\l+ Skeleton\l+ R\l+ G\l+ B\l+ A\l+ R2\l+ G2\l+ B2\l+ HasSecondColor\l+ Attachment\l+ AttachmentTime\l+ AttachmentVertices\l~ r\l~ r2\l~ hasSecondColor\l~ attachmentTime\l- g\l- b\l- a\l- g2\l- b2\l|+ Slot()\l+ SetToSetupPose()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_slot.html",tooltip=" "];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" ~attachmentVertices" ,arrowhead="odiamond"];
  Node9 [label="{Spine.ExposedList\<\l float \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node10 -> Node8 [color="grey25",fontsize="10",style="solid",label=" ~attachment" ,arrowhead="odiamond"];
  Node10 [label="{Spine.Attachment\n|+ Name\l|+ ToString()\l# Attachment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_attachment.html",tooltip=" "];
  Node11 -> Node8 [color="grey25",fontsize="10",style="solid",label=" ~data" ,arrowhead="odiamond"];
  Node11 [label="{Spine.SlotData\n|+ Index\l+ Name\l+ BoneData\l+ R\l+ G\l+ B\l+ A\l+ R2\l+ G2\l+ B2\l+ HasSecondColor\l+ AttachmentName\l+ BlendMode\l~ index\l~ name\l~ r\l~ r2\l~ hasSecondColor\l~ attachmentName\l~ blendMode\l- g\l- b\l- a\l- g2\l- b2\l|+ SlotData()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_slot_data.html",tooltip=" "];
  Node12 -> Node11 [color="grey25",fontsize="10",style="solid",label=" ~boneData" ,arrowhead="odiamond"];
  Node12 [label="{Spine.BoneData\n|+ Index\l+ Name\l+ Parent\l+ Length\l+ X\l+ Y\l+ Rotation\l+ ScaleX\l+ ScaleY\l+ ShearX\l+ ShearY\l+ TransformMode\l~ index\l~ name\l~ length\l~ x\l~ transformMode\l- y\l- rotation\l- scaleX\l- scaleY\l- shearX\l- shearY\l|+ BoneData()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_bone_data.html",tooltip=" "];
  Node12 -> Node12 [color="grey25",fontsize="10",style="solid",label=" ~parent" ,arrowhead="odiamond"];
  Node13 -> Node8 [color="grey25",fontsize="10",style="solid",label=" ~bone" ,arrowhead="odiamond"];
  Node13 [label="{Spine.Bone\n|+ yDown\l+ Data\l+ Skeleton\l+ Parent\l+ Children\l+ X\l+ Y\l+ Rotation\l+ ScaleX\l+ ScaleY\l+ ShearX\l그리고 20개 더...\l~ x\l~ ax\l~ appliedValid\l~ a\l~ c\l~ sorted\l- y\l- rotation\l- scaleX\l- scaleY\l- shearX\l- shearY\l- ay\l- arotation\l- ascaleX\l- ascaleY\l그리고 6개 더...\l|+ Bone()\l+ Update()\l+ UpdateWorldTransform()\l+ UpdateWorldTransform()\l+ SetToSetupPose()\l+ WorldToLocal()\l+ LocalToWorld()\l+ WorldToLocalRotation()\l+ LocalToWorldRotation()\l+ RotateWorld()\l+ ToString()\l~ UpdateAppliedTransform()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_bone.html",tooltip="Stores a bone's current pose."];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{IUpdatable\n||+ Update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_i_updatable.html",tooltip=" "];
  Node15 -> Node13 [color="grey25",fontsize="10",style="solid",label=" ~children" ,arrowhead="odiamond"];
  Node15 [label="{Spine.ExposedList\<\l Spine.Bone \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node12 -> Node13 [color="grey25",fontsize="10",style="solid",label=" ~data" ,arrowhead="odiamond"];
  Node16 -> Node13 [color="grey25",fontsize="10",style="solid",label=" ~skeleton" ,arrowhead="odiamond"];
  Node16 [label="{Spine.Skeleton\n|+ Data\l+ Bones\l+ UpdateCacheList\l+ Slots\l+ DrawOrder\l+ IkConstraints\l+ PathConstraints\l+ TransformConstraints\l+ Skin\l+ R\l그리고 9개 더...\l~ r\l~ time\l~ flipX\l~ x\l- g\l- b\l- a\l- flipY\l- y\l|+ Skeleton()\l+ UpdateCache()\l+ UpdateWorldTransform()\l+ SetToSetupPose()\l+ SetBonesToSetupPose()\l+ SetSlotsToSetupPose()\l+ FindBone()\l+ FindBoneIndex()\l+ FindSlot()\l+ FindSlotIndex()\l그리고 10개 더...\l- SortIkConstraint()\l- SortPathConstraint()\l- SortTransformConstraint()\l- SortPathConstraintAttachment()\l- SortPathConstraintAttachment()\l- SortBone()\l- SortReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton.html",tooltip=" "];
  Node17 -> Node16 [color="grey25",fontsize="10",style="solid",label=" ~data" ,arrowhead="odiamond"];
  Node17 [label="{Spine.SkeletonData\n|+ Name\l+ Bones\l+ Slots\l+ Skins\l+ DefaultSkin\l+ Events\l+ Animations\l+ IkConstraints\l+ TransformConstraints\l+ PathConstraints\l그리고 6개 더...\l~ name\l~ width\l~ version\l~ fps\l~ imagesPath\l- height\l- hash\l|+ FindBone()\l+ FindBoneIndex()\l+ FindSlot()\l+ FindSlotIndex()\l+ FindSkin()\l+ FindEvent()\l+ FindAnimation()\l+ FindIkConstraint()\l+ FindTransformConstraint()\l+ FindPathConstraint()\l+ FindPathConstraintIndex()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton_data.html",tooltip="Stores the setup pose and all of the stateless data for a skeleton."];
  Node18 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~animations" ,arrowhead="odiamond"];
  Node18 [label="{Spine.ExposedList\<\l Spine.Animation \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node19 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~pathConstraints" ,arrowhead="odiamond"];
  Node19 [label="{Spine.ExposedList\<\l Spine.PathConstraintData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node20 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~events" ,arrowhead="odiamond"];
  Node20 [label="{Spine.ExposedList\<\l Spine.EventData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node21 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~skins" ,arrowhead="odiamond"];
  Node21 [label="{Spine.ExposedList\<\l Spine.Skin \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node3 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~defaultSkin" ,arrowhead="odiamond"];
  Node22 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~ikConstraints" ,arrowhead="odiamond"];
  Node22 [label="{Spine.ExposedList\<\l Spine.IkConstraintData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node23 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~transformConstraints" ,arrowhead="odiamond"];
  Node23 [label="{Spine.ExposedList\<\l Spine.TransformConstraint\lData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node24 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~slots" ,arrowhead="odiamond"];
  Node24 [label="{Spine.ExposedList\<\l Spine.SlotData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node25 -> Node17 [color="grey25",fontsize="10",style="solid",label=" ~bones" ,arrowhead="odiamond"];
  Node25 [label="{Spine.ExposedList\<\l Spine.BoneData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node15 -> Node16 [color="grey25",fontsize="10",style="solid",label=" ~bones\n~updateCacheReset" ,arrowhead="odiamond"];
  Node26 -> Node16 [color="grey25",fontsize="10",style="solid",label=" ~ikConstraints" ,arrowhead="odiamond"];
  Node26 [label="{Spine.ExposedList\<\l Spine.IkConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node27 -> Node16 [color="grey25",fontsize="10",style="solid",label=" ~updateCache" ,arrowhead="odiamond"];
  Node27 [label="{Spine.ExposedList\<\l Spine.IUpdatable \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node3 -> Node16 [color="grey25",fontsize="10",style="solid",label=" ~skin" ,arrowhead="odiamond"];
  Node28 -> Node16 [color="grey25",fontsize="10",style="solid",label=" ~pathConstraints" ,arrowhead="odiamond"];
  Node28 [label="{Spine.ExposedList\<\l Spine.PathConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node29 -> Node16 [color="grey25",fontsize="10",style="solid",label=" ~slots\n~drawOrder" ,arrowhead="odiamond"];
  Node29 [label="{Spine.ExposedList\<\l Spine.Slot \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node30 -> Node16 [color="grey25",fontsize="10",style="solid",label=" ~transformConstraints" ,arrowhead="odiamond"];
  Node30 [label="{Spine.ExposedList\<\l Spine.TransformConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node13 -> Node13 [color="grey25",fontsize="10",style="solid",label=" ~parent" ,arrowhead="odiamond"];
  Node31 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +skeletonRenderer" ,arrowhead="odiamond"];
  Node31 [label="{Spine.Unity.SkeletonRenderer\n|+ initialSkinName\l+ initialFlipX\l+ separatorSlotNames\l+ separatorSlots\l+ zSpacing\l+ useClipping\l+ immutableTriangles\l+ pmaVertexColors\l+ clearStateOnDisable\l+ tintBlack\l그리고 6개 더...\l+ SkeletonDataAsset\l+ GenerateMeshOverride\l+ CustomMaterialOverride\l+ CustomSlotMaterials\l+ Skeleton\l- initialFlipY\l- customMaterialOverride\l- customSlotMaterials\l- meshRenderer\l- meshFilter\l|+ SkeletonRendererDelegate()\l+ InstructionDelegate()\l+ SetMeshSettings()\l+ Awake()\l+ ClearState()\l+ EnsureMeshGeneratorCapacity()\l+ Initialize()\l+ LateUpdate()\l+ NewSpineGameObject\< T \>()\l+ AddSpineComponent\< T \>()\l- OnDisable()\l- OnDestroy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_renderer.html",tooltip="Renders a skeleton."];
  Node2 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node32 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node32 [label="{ISkeletonComponent\n|+ SkeletonDataAsset\l+ Skeleton\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_skeleton_component.html",tooltip="A Spine-Unity Component that manages a Spine.Skeleton instance, instantiated from a SkeletonDataAsset..."];
  Node33 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node33 [label="{IHasSkeletonDataAsset\n|+ SkeletonDataAsset\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_has_skeleton_data_asset.html",tooltip="Holds a reference to a SkeletonDataAsset."];
  Node34 -> Node31 [color="grey25",fontsize="10",style="solid",label=" +skeletonDataAsset" ,arrowhead="odiamond"];
  Node34 [label="{Spine.Unity.SkeletonData\lAsset\n|+ scale\l+ skeletonJSON\l+ fromAnimation\l+ toAnimation\l+ duration\l+ defaultMix\l+ controller\l+ IsLoaded\l|+ Clear()\l+ GetSkeletonData()\l+ FillStateData()\l+ GetAnimationStateData()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l~ InitializeWithData()\l~ GetAtlasArray()\l~ ReadSkeletonData()\l~ ReadSkeletonData()\l- Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_data_asset.html",tooltip=" "];
  Node35 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node35 [label="{ScriptableObject\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node36 -> Node34 [color="grey25",fontsize="10",style="solid",label=" -stateData" ,arrowhead="odiamond"];
  Node36 [label="{Spine.AnimationStateData\n|+ SkeletonData\l+ DefaultMix\l~ defaultMix\l- animationToMixTime\l|+ AnimationStateData()\l+ SetMix()\l+ SetMix()\l+ GetMix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_animation_state_data.html",tooltip="Stores mix (crossfade) durations to be applied when AnimationState animations are changed."];
  Node17 -> Node36 [color="grey25",fontsize="10",style="solid",label=" ~skeletonData" ,arrowhead="odiamond"];
  Node17 -> Node34 [color="grey25",fontsize="10",style="solid",label=" -skeletonData" ,arrowhead="odiamond"];
  Node37 -> Node34 [color="grey25",fontsize="10",style="solid",label=" +atlasAssets" ,arrowhead="odiamond"];
  Node37 [label="{Spine.Unity.AtlasAsset\n|+ atlasFile\l+ materials\l+ IsLoaded\l|+ Clear()\l+ GetAtlas()\l+ GenerateMesh()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l- Reset()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_atlas_asset.html",tooltip="Loads and stores a Spine atlas and list of materials."];
  Node35 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node41 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -rendererBuffers" ,arrowhead="odiamond"];
  Node41 [label="{Spine.Unity.MeshRenderer\lBuffers\n|~ sharedMaterials\l|+ Initialize()\l+ GetUpdatedSharedMaterials\lArray()\l+ MaterialsChangedInLastUpdate()\l+ UpdateSharedMaterials()\l+ GetNextMesh()\l+ Clear()\l+ Dispose()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_mesh_renderer_buffers.html",tooltip=" "];
  Node42 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node42 [label="{IDisposable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node43 -> Node41 [color="grey25",fontsize="10",style="solid",label=" -doubleBufferedMesh" ,arrowhead="odiamond"];
  Node43 [label="{Spine.Unity.DoubleBuffered\l\< Spine.Unity.MeshRendererBuffers.\lSmartMesh \>\n|- a\l- b\l- usingA\l|+ GetCurrent()\l+ GetNext()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_double_buffered.html",tooltip=" "];
  Node44 -> Node41 [color="grey25",fontsize="10",style="solid",label=" ~submeshMaterials" ,arrowhead="odiamond"];
  Node44 [label="{Spine.ExposedList\<\l Material \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node45 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -meshGenerator" ,arrowhead="odiamond"];
  Node45 [label="{Spine.Unity.MeshGenerator\n|+ VertexCount\l+ Buffers\l- meshBoundsMin\l- meshBoundsMax\l- meshBoundsThickness\l- submeshIndex\l- tempVerts\l- regionTriangles\l- normals\l- tangents\l- tempTanBuffer\l- BoundsMinDefault\l- BoundsMaxDefault\l- AttachmentVerts\l- AttachmentUVs\l- AttachmentColors32\l- AttachmentIndices\l|+ MeshGenerator()\l+ Begin()\l+ AddSubmesh()\l+ BuildMesh()\l+ BuildMeshWithArrays()\l+ ScaleVertexData()\l+ FillVertexData()\l+ FillLateVertexData()\l+ FillTriangles()\l+ FillTrianglesSingle()\l+ EnsureVertexCapacity()\l+ TrimExcess()\l+ GenerateSingleSubmeshInstruction()\l+ GenerateSkeletonRenderer\lInstruction()\l+ TryReplaceMaterials()\l+ FillMeshLocal()\l+ FillMeshLocal()\l~ SolveTangents2DEnsureSize()\l~ SolveTangents2DTriangles()\l~ SolveTangents2DBuffer()\l- AddAttachmentTintBlack()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_mesh_generator.html",tooltip=" "];
  Node46 -> Node45 [color="grey25",fontsize="10",style="solid",label=" -clipper" ,arrowhead="odiamond"];
  Node46 [label="{Spine.SkeletonClipping\n|+ ClippedVertices\l+ ClippedTriangles\l+ ClippedUVs\l+ IsClipping\l|+ ClipStart()\l+ ClipEnd()\l+ ClipEnd()\l+ ClipTriangles()\l~ Clip()\l- MakeClockwise()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton_clipping.html",tooltip=" "];
  Node9 -> Node46 [color="grey25",fontsize="10",style="solid",label=" ~clippedUVs\n~clippingPolygon\n~clipOutput\n~clippedVertices\n~scratch" ,arrowhead="odiamond"];
  Node55 -> Node45 [color="grey25",fontsize="10",style="solid",label=" -uv2\n-uv3\n-uvBuffer" ,arrowhead="odiamond"];
  Node55 [label="{Spine.ExposedList\<\l Vector2 \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node51 -> Node45 [color="grey25",fontsize="10",style="solid",label=" -submeshes" ,arrowhead="odiamond"];
  Node51 [label="{Spine.ExposedList\<\l Spine.ExposedList\<\l int \> \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node56 -> Node45 [color="grey25",fontsize="10",style="solid",label=" -vertexBuffer" ,arrowhead="odiamond"];
  Node56 [label="{Spine.ExposedList\<\l Vector3 \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node57 -> Node45 [color="grey25",fontsize="10",style="solid",label=" -colorBuffer" ,arrowhead="odiamond"];
  Node57 [label="{Spine.ExposedList\<\l Color32 \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node58 -> Node45 [color="grey25",fontsize="10",style="solid",label=" +settings" ,arrowhead="odiamond"];
  Node58 [label="{Spine.Unity.MeshGenerator.\lSettings\n|+ useClipping\l+ zSpacing\l+ pmaVertexColors\l+ tintBlack\l+ calculateTangents\l+ addNormals\l+ immutableTriangles\l+ Default\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_spine_1_1_unity_1_1_mesh_generator_1_1_settings.html",tooltip=" "];
  Node16 -> Node31 [color="grey25",fontsize="10",style="solid",label=" +skeleton" ,arrowhead="odiamond"];
  Node59 -> Node31 [color="grey25",fontsize="10",style="solid",label=" -currentInstructions" ,arrowhead="odiamond"];
  Node59 [label="{Spine.Unity.SkeletonRenderer\lInstruction\n|+ immutableTriangles\l|+ Clear()\l+ Dispose()\l+ SetWithSubset()\l+ Set()\l+ GeometryNotEqual()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_renderer_instruction.html",tooltip=" "];
  Node60 -> Node59 [color="grey25",fontsize="10",style="solid",label=" +submeshInstructions" ,arrowhead="odiamond"];
  Node60 [label="{Spine.ExposedList\<\l Spine.Unity.SubmeshInstruction \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
}
