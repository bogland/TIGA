digraph "Spine.Unity.Editor.SpineTreeItemDrawerBase&lt; T &gt;"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Spine.Unity.Editor.Spine\lTreeItemDrawerBase\< T \>\n|+ TargetAttribute\l+ SerializedProperty\l+ Icon\l~ NoneString\l- noneLabel\l|+ OnGUI()\l+ GetTargetSkeletonComponent()\l+ GetPropertyHeight()\l# Selector()\l# PopulateMenu()\l# HandleSelect()\l- NoneLabel()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{PropertyDrawer\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #skeletonDataAsset" ,arrowhead="odiamond"];
  Node3 [label="{Spine.Unity.SkeletonData\lAsset\n|+ scale\l+ skeletonJSON\l+ fromAnimation\l+ toAnimation\l+ duration\l+ defaultMix\l+ controller\l+ IsLoaded\l|+ Clear()\l+ GetSkeletonData()\l+ FillStateData()\l+ GetAnimationStateData()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l~ InitializeWithData()\l~ GetAtlasArray()\l~ ReadSkeletonData()\l~ ReadSkeletonData()\l- Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_data_asset.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ScriptableObject\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -stateData" ,arrowhead="odiamond"];
  Node5 [label="{Spine.AnimationStateData\n|+ SkeletonData\l+ DefaultMix\l~ defaultMix\l- animationToMixTime\l|+ AnimationStateData()\l+ SetMix()\l+ SetMix()\l+ GetMix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_animation_state_data.html",tooltip="Stores mix (crossfade) durations to be applied when AnimationState animations are changed."];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" ~skeletonData" ,arrowhead="odiamond"];
  Node6 [label="{Spine.SkeletonData\n|+ Name\l+ Bones\l+ Slots\l+ Skins\l+ DefaultSkin\l+ Events\l+ Animations\l+ IkConstraints\l+ TransformConstraints\l+ PathConstraints\l그리고 6개 더...\l~ name\l~ width\l~ version\l~ fps\l~ imagesPath\l- height\l- hash\l|+ FindBone()\l+ FindBoneIndex()\l+ FindSlot()\l+ FindSlotIndex()\l+ FindSkin()\l+ FindEvent()\l+ FindAnimation()\l+ FindIkConstraint()\l+ FindTransformConstraint()\l+ FindPathConstraint()\l+ FindPathConstraintIndex()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton_data.html",tooltip="Stores the setup pose and all of the stateless data for a skeleton."];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~animations" ,arrowhead="odiamond"];
  Node7 [label="{Spine.ExposedList\<\l Spine.Animation \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node8 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~pathConstraints" ,arrowhead="odiamond"];
  Node8 [label="{Spine.ExposedList\<\l Spine.PathConstraintData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node9 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~events" ,arrowhead="odiamond"];
  Node9 [label="{Spine.ExposedList\<\l Spine.EventData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node10 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~skins" ,arrowhead="odiamond"];
  Node10 [label="{Spine.ExposedList\<\l Spine.Skin \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node11 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~defaultSkin" ,arrowhead="odiamond"];
  Node11 [label="{Spine.Skin\n|+ Name\l+ Attachments\l~ name\l- attachments\l|+ Skin()\l+ AddAttachment()\l+ GetAttachment()\l+ FindNamesForSlot()\l+ FindAttachmentsForSlot()\l+ ToString()\l~ AttachAll()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skin.html",tooltip="Stores attachments by slot index and attachment name."];
  Node12 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~ikConstraints" ,arrowhead="odiamond"];
  Node12 [label="{Spine.ExposedList\<\l Spine.IkConstraintData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node13 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~transformConstraints" ,arrowhead="odiamond"];
  Node13 [label="{Spine.ExposedList\<\l Spine.TransformConstraint\lData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node14 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~slots" ,arrowhead="odiamond"];
  Node14 [label="{Spine.ExposedList\<\l Spine.SlotData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node15 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~bones" ,arrowhead="odiamond"];
  Node15 [label="{Spine.ExposedList\<\l Spine.BoneData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node6 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -skeletonData" ,arrowhead="odiamond"];
  Node16 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +atlasAssets" ,arrowhead="odiamond"];
  Node16 [label="{Spine.Unity.AtlasAsset\n|+ atlasFile\l+ materials\l+ IsLoaded\l|+ Clear()\l+ GetAtlas()\l+ GenerateMesh()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l- Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_atlas_asset.html",tooltip="Loads and stores a Spine atlas and list of materials."];
  Node4 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 -> Node16 [color="grey25",fontsize="10",style="solid",label=" #atlas" ,arrowhead="odiamond"];
  Node17 [label="{Spine.Atlas\n|- pages\l- regions\l|+ GetEnumerator()\l+ Atlas()\l+ Atlas()\l+ Atlas()\l+ FlipV()\l+ FindRegion()\l+ Dispose()\l- GetEnumerator()\l- Load()\l- ReadValue()\l- ReadTuple()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_atlas.html",tooltip=" "];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{IEnumerable\< AtlasRegion \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node19 -> Node17 [color="grey25",fontsize="10",style="solid",label=" -textureLoader" ,arrowhead="odiamond"];
  Node19 [label="{Spine.TextureLoader\n||+ Load()\l+ Unload()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_texture_loader.html",tooltip=" "];
}
