digraph "Spine.SkeletonClipping"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Spine.SkeletonClipping\n|+ ClippedVertices\l+ ClippedTriangles\l+ ClippedUVs\l+ IsClipping\l|+ ClipStart()\l+ ClipEnd()\l+ ClipEnd()\l+ ClipTriangles()\l~ Clip()\l- MakeClockwise()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" ~clipAttachment" ,arrowhead="odiamond"];
  Node2 [label="{Spine.ClippingAttachment\n|+ EndSlot\l|+ ClippingAttachment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_clipping_attachment.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{VertexAttachment\n|+ Id\l+ Bones\l+ Vertices\l+ WorldVerticesLength\l~ id\l~ bones\l~ vertices\l~ worldVerticesLength\l- nextID\l- nextIdLock\l|+ VertexAttachment()\l+ ComputeWorldVertices()\l+ ComputeWorldVertices()\l+ ApplyDeform()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_vertex_attachment.html",tooltip=">An attachment with vertices that are transformed by one or more bones and can be deformed by a slot'..."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{Attachment\n|+ Name\l|+ ToString()\l# Attachment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_attachment.html",tooltip=" "];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" ~endSlot" ,arrowhead="odiamond"];
  Node5 [label="{Spine.SlotData\n|+ Index\l+ Name\l+ BoneData\l+ R\l+ G\l+ B\l+ A\l+ R2\l+ G2\l+ B2\l+ HasSecondColor\l+ AttachmentName\l+ BlendMode\l~ index\l~ name\l~ r\l~ r2\l~ hasSecondColor\l~ attachmentName\l~ blendMode\l- g\l- b\l- a\l- g2\l- b2\l|+ SlotData()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_slot_data.html",tooltip=" "];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" ~boneData" ,arrowhead="odiamond"];
  Node6 [label="{Spine.BoneData\n|+ Index\l+ Name\l+ Parent\l+ Length\l+ X\l+ Y\l+ Rotation\l+ ScaleX\l+ ScaleY\l+ ShearX\l+ ShearY\l+ TransformMode\l~ index\l~ name\l~ length\l~ x\l~ transformMode\l- y\l- rotation\l- scaleX\l- scaleY\l- shearX\l- shearY\l|+ BoneData()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_bone_data.html",tooltip=" "];
  Node6 -> Node6 [color="grey25",fontsize="10",style="solid",label=" ~parent" ,arrowhead="odiamond"];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" ~clippedUVs\n~clippingPolygon\n~clipOutput\n~clippedVertices\n~scratch" ,arrowhead="odiamond"];
  Node7 [label="{Spine.ExposedList\<\l float \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" ~clippedTriangles" ,arrowhead="odiamond"];
  Node8 [label="{Spine.ExposedList\<\l int \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" ~triangulator" ,arrowhead="odiamond"];
  Node9 [label="{Spine.Triangulator\n||+ Triangulate()\l+ Decompose()\l- IsConcave()\l- PositiveArea()\l- Winding()\l}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -isConcaveArray" ,arrowhead="odiamond"];
  Node10 [label="{Spine.ExposedList\<\l bool \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node8 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -indicesArray\n-triangles" ,arrowhead="odiamond"];
  Node11 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -convexPolygonsIndices" ,arrowhead="odiamond"];
  Node11 [label="{Spine.ExposedList\<\l Spine.ExposedList\<\l int \> \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node12 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -polygonIndicesPool" ,arrowhead="odiamond"];
  Node12 [label="{Spine.Pool\< Spine.Exposed\lList\< int \> \>\n|+ max\l+ Count\l+ Peak\l- freeObjects\l|+ Pool()\l+ Obtain()\l+ Free()\l+ Clear()\l# Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_pool.html",tooltip=" "];
  Node13 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -convexPolygons" ,arrowhead="odiamond"];
  Node13 [label="{Spine.ExposedList\<\l Spine.ExposedList\<\l float \> \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node14 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -polygonPool" ,arrowhead="odiamond"];
  Node14 [label="{Spine.Pool\< Spine.Exposed\lList\< float \> \>\n|+ max\l+ Count\l+ Peak\l- freeObjects\l|+ Pool()\l+ Obtain()\l+ Free()\l+ Clear()\l# Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_pool.html",tooltip=" "];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" ~clippingPolygons" ,arrowhead="odiamond"];
}
