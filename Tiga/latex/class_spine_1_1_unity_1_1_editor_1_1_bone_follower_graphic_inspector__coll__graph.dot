digraph "Spine.Unity.Editor.BoneFollowerGraphicInspector"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Spine.Unity.Editor.BoneFollower\lGraphicInspector\n|- boneName\l- skeletonGraphic\l- followZPosition\l- followBoneRotation\l- followLocalScale\l- followSkeletonFlip\l- needsReset\l|+ OnSceneGUI()\l+ OnInspectorGUI()\l- OnEnable()\l- AddBoneFollowerGameObject()\l- ValidateAddBoneFollowerGame\lObject()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{Editor\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -targetBoneFollower" ,arrowhead="odiamond"];
  Node3 [label="{Spine.Unity.BoneFollower\lGraphic\n|+ initializeOnAwake\l+ boneName\l+ followBoneRotation\l+ followSkeletonFlip\l+ followLocalScale\l+ followZPosition\l+ valid\l+ SkeletonGraphic\l- skeletonTransform\l- skeletonTransformIsParent\l|+ SetBone()\l+ Awake()\l+ Initialize()\l+ LateUpdate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_bone_follower_graphic.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{MonoBehaviour\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +skeletonGraphic" ,arrowhead="odiamond"];
  Node5 [label="{Spine.Unity.SkeletonGraphic\n|+ initialSkinName\l+ initialFlipX\l+ startingAnimation\l+ startingLoop\l+ timeScale\l+ freeze\l+ unscaledTime\l+ SkeletonDataAsset\l+ OverrideTexture\l+ mainTexture\l+ Skeleton\l+ SkeletonData\l+ IsValid\l+ AnimationState\l+ MeshGenerator\l- initialFlipY\l- overrideTexture\l|+ Rebuild()\l+ Update()\l+ Update()\l+ LateUpdate()\l+ GetLastMesh()\l+ Clear()\l+ Initialize()\l+ UpdateMesh()\l+ NewSkeletonGraphicGameObject()\l+ AddSkeletonGraphicComponent()\l# Awake()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_graphic.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{MaskableGraphic\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ISkeletonComponent\n|+ SkeletonDataAsset\l+ Skeleton\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_skeleton_component.html",tooltip="A Spine-Unity Component that manages a Spine.Skeleton instance, instantiated from a SkeletonDataAsset..."];
  Node8 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{IAnimationStateComponent\n|+ AnimationState\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_animation_state_component.html",tooltip="A Spine-Unity Component that uses a Spine.AnimationState to animate its skeleton."];
  Node9 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ISkeletonAnimation\n|+ Skeleton\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_skeleton_animation.html",tooltip="A Spine-Unity Component that animates a Skeleton but not necessarily with a Spine...."];
  Node10 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{IHasSkeletonDataAsset\n|+ SkeletonDataAsset\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_has_skeleton_data_asset.html",tooltip="Holds a reference to a SkeletonDataAsset."];
  Node11 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -meshBuffers" ,arrowhead="odiamond"];
  Node11 [label="{Spine.Unity.DoubleBuffered\l\< Spine.Unity.Spine.Unity.MeshRenderer\lBuffers.SmartMesh \>\n|- a\l- b\l- usingA\l|+ GetCurrent()\l+ GetNext()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_double_buffered.html",tooltip=" "];
  Node12 -> Node5 [color="grey25",fontsize="10",style="solid",label=" +skeletonDataAsset" ,arrowhead="odiamond"];
  Node12 [label="{Spine.Unity.SkeletonData\lAsset\n|+ scale\l+ skeletonJSON\l+ fromAnimation\l+ toAnimation\l+ duration\l+ defaultMix\l+ controller\l+ IsLoaded\l|+ Clear()\l+ GetSkeletonData()\l+ FillStateData()\l+ GetAnimationStateData()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l~ InitializeWithData()\l~ GetAtlasArray()\l~ ReadSkeletonData()\l~ ReadSkeletonData()\l- Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_data_asset.html",tooltip=" "];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ScriptableObject\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node14 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -stateData" ,arrowhead="odiamond"];
  Node14 [label="{Spine.AnimationStateData\n|+ SkeletonData\l+ DefaultMix\l~ defaultMix\l- animationToMixTime\l|+ AnimationStateData()\l+ SetMix()\l+ SetMix()\l+ GetMix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_animation_state_data.html",tooltip="Stores mix (crossfade) durations to be applied when AnimationState animations are changed."];
  Node15 -> Node14 [color="grey25",fontsize="10",style="solid",label=" ~skeletonData" ,arrowhead="odiamond"];
  Node15 [label="{Spine.SkeletonData\n|+ Name\l+ Bones\l+ Slots\l+ Skins\l+ DefaultSkin\l+ Events\l+ Animations\l+ IkConstraints\l+ TransformConstraints\l+ PathConstraints\l그리고 6개 더...\l~ name\l~ width\l~ version\l~ fps\l~ imagesPath\l- height\l- hash\l|+ FindBone()\l+ FindBoneIndex()\l+ FindSlot()\l+ FindSlotIndex()\l+ FindSkin()\l+ FindEvent()\l+ FindAnimation()\l+ FindIkConstraint()\l+ FindTransformConstraint()\l+ FindPathConstraint()\l+ FindPathConstraintIndex()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton_data.html",tooltip="Stores the setup pose and all of the stateless data for a skeleton."];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~animations" ,arrowhead="odiamond"];
  Node16 [label="{Spine.ExposedList\<\l Spine.Animation \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node17 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~pathConstraints" ,arrowhead="odiamond"];
  Node17 [label="{Spine.ExposedList\<\l Spine.PathConstraintData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node18 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~events" ,arrowhead="odiamond"];
  Node18 [label="{Spine.ExposedList\<\l Spine.EventData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node19 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~skins" ,arrowhead="odiamond"];
  Node19 [label="{Spine.ExposedList\<\l Spine.Skin \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node20 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~defaultSkin" ,arrowhead="odiamond"];
  Node20 [label="{Spine.Skin\n|+ Name\l+ Attachments\l~ name\l- attachments\l|+ Skin()\l+ AddAttachment()\l+ GetAttachment()\l+ FindNamesForSlot()\l+ FindAttachmentsForSlot()\l+ ToString()\l~ AttachAll()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skin.html",tooltip="Stores attachments by slot index and attachment name."];
  Node21 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~ikConstraints" ,arrowhead="odiamond"];
  Node21 [label="{Spine.ExposedList\<\l Spine.IkConstraintData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node22 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~transformConstraints" ,arrowhead="odiamond"];
  Node22 [label="{Spine.ExposedList\<\l Spine.TransformConstraint\lData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node23 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~slots" ,arrowhead="odiamond"];
  Node23 [label="{Spine.ExposedList\<\l Spine.SlotData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node24 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~bones" ,arrowhead="odiamond"];
  Node24 [label="{Spine.ExposedList\<\l Spine.BoneData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node15 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -skeletonData" ,arrowhead="odiamond"];
  Node25 -> Node12 [color="grey25",fontsize="10",style="solid",label=" +atlasAssets" ,arrowhead="odiamond"];
  Node25 [label="{Spine.Unity.AtlasAsset\n|+ atlasFile\l+ materials\l+ IsLoaded\l|+ Clear()\l+ GetAtlas()\l+ GenerateMesh()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l- Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_atlas_asset.html",tooltip="Loads and stores a Spine atlas and list of materials."];
  Node13 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 -> Node25 [color="grey25",fontsize="10",style="solid",label=" #atlas" ,arrowhead="odiamond"];
  Node26 [label="{Spine.Atlas\n|- pages\l- regions\l|+ GetEnumerator()\l+ Atlas()\l+ Atlas()\l+ Atlas()\l+ FlipV()\l+ FindRegion()\l+ Dispose()\l- GetEnumerator()\l- Load()\l- ReadValue()\l- ReadTuple()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_atlas.html",tooltip=" "];
  Node27 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node27 [label="{IEnumerable\< AtlasRegion \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node28 -> Node26 [color="grey25",fontsize="10",style="solid",label=" -textureLoader" ,arrowhead="odiamond"];
  Node28 [label="{Spine.TextureLoader\n||+ Load()\l+ Unload()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_texture_loader.html",tooltip=" "];
  Node29 -> Node5 [color="grey25",fontsize="10",style="solid",label=" #skeleton" ,arrowhead="odiamond"];
  Node29 [label="{Spine.Skeleton\n|+ Data\l+ Bones\l+ UpdateCacheList\l+ Slots\l+ DrawOrder\l+ IkConstraints\l+ PathConstraints\l+ TransformConstraints\l+ Skin\l+ R\l그리고 9개 더...\l~ r\l~ time\l~ flipX\l~ x\l- g\l- b\l- a\l- flipY\l- y\l|+ Skeleton()\l+ UpdateCache()\l+ UpdateWorldTransform()\l+ SetToSetupPose()\l+ SetBonesToSetupPose()\l+ SetSlotsToSetupPose()\l+ FindBone()\l+ FindBoneIndex()\l+ FindSlot()\l+ FindSlotIndex()\l그리고 10개 더...\l- SortIkConstraint()\l- SortPathConstraint()\l- SortTransformConstraint()\l- SortPathConstraintAttachment()\l- SortPathConstraintAttachment()\l- SortBone()\l- SortReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton.html",tooltip=" "];
  Node15 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~data" ,arrowhead="odiamond"];
  Node30 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~bones\n~updateCacheReset" ,arrowhead="odiamond"];
  Node30 [label="{Spine.ExposedList\<\l Spine.Bone \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node31 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~ikConstraints" ,arrowhead="odiamond"];
  Node31 [label="{Spine.ExposedList\<\l Spine.IkConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node32 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~updateCache" ,arrowhead="odiamond"];
  Node32 [label="{Spine.ExposedList\<\l Spine.IUpdatable \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node20 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~skin" ,arrowhead="odiamond"];
  Node33 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~pathConstraints" ,arrowhead="odiamond"];
  Node33 [label="{Spine.ExposedList\<\l Spine.PathConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node34 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~slots\n~drawOrder" ,arrowhead="odiamond"];
  Node34 [label="{Spine.ExposedList\<\l Spine.Slot \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node35 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~transformConstraints" ,arrowhead="odiamond"];
  Node35 [label="{Spine.ExposedList\<\l Spine.TransformConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node36 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -currentInstructions" ,arrowhead="odiamond"];
  Node36 [label="{Spine.Unity.SkeletonRenderer\lInstruction\n|+ immutableTriangles\l|+ Clear()\l+ Dispose()\l+ SetWithSubset()\l+ Set()\l+ GeometryNotEqual()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_renderer_instruction.html",tooltip=" "];
  Node37 -> Node36 [color="grey25",fontsize="10",style="solid",label=" +submeshInstructions" ,arrowhead="odiamond"];
  Node37 [label="{Spine.ExposedList\<\l Spine.Unity.SubmeshInstruction \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node38 -> Node5 [color="grey25",fontsize="10",style="solid",label=" #meshGenerator\n#state" ,arrowhead="odiamond"];
  Node38 [label="{Spine\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node39 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +bone" ,arrowhead="odiamond"];
  Node39 [label="{Spine.Bone\n|+ yDown\l+ Data\l+ Skeleton\l+ Parent\l+ Children\l+ X\l+ Y\l+ Rotation\l+ ScaleX\l+ ScaleY\l+ ShearX\l그리고 20개 더...\l~ x\l~ ax\l~ appliedValid\l~ a\l~ c\l~ sorted\l- y\l- rotation\l- scaleX\l- scaleY\l- shearX\l- shearY\l- ay\l- arotation\l- ascaleX\l- ascaleY\l그리고 6개 더...\l|+ Bone()\l+ Update()\l+ UpdateWorldTransform()\l+ UpdateWorldTransform()\l+ SetToSetupPose()\l+ WorldToLocal()\l+ LocalToWorld()\l+ WorldToLocalRotation()\l+ LocalToWorldRotation()\l+ RotateWorld()\l+ ToString()\l~ UpdateAppliedTransform()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_bone.html",tooltip="Stores a bone's current pose."];
  Node40 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node40 [label="{IUpdatable\n||+ Update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_i_updatable.html",tooltip=" "];
  Node30 -> Node39 [color="grey25",fontsize="10",style="solid",label=" ~children" ,arrowhead="odiamond"];
  Node41 -> Node39 [color="grey25",fontsize="10",style="solid",label=" ~data" ,arrowhead="odiamond"];
  Node41 [label="{Spine.BoneData\n|+ Index\l+ Name\l+ Parent\l+ Length\l+ X\l+ Y\l+ Rotation\l+ ScaleX\l+ ScaleY\l+ ShearX\l+ ShearY\l+ TransformMode\l~ index\l~ name\l~ length\l~ x\l~ transformMode\l- y\l- rotation\l- scaleX\l- scaleY\l- shearX\l- shearY\l|+ BoneData()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_bone_data.html",tooltip=" "];
  Node41 -> Node41 [color="grey25",fontsize="10",style="solid",label=" ~parent" ,arrowhead="odiamond"];
  Node29 -> Node39 [color="grey25",fontsize="10",style="solid",label=" ~skeleton" ,arrowhead="odiamond"];
  Node39 -> Node39 [color="grey25",fontsize="10",style="solid",label=" ~parent" ,arrowhead="odiamond"];
}
