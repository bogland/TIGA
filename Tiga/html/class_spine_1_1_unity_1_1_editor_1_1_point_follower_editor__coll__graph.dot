digraph "Spine.Unity.Editor.PointFollowerEditor"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Spine.Unity.Editor.Point\lFollowerEditor\n|- slotName\l- pointAttachmentName\l- skeletonRenderer\l- followZPosition\l- followBoneRotation\l- followSkeletonFlip\l- needsReset\l|+ OnSceneGUI()\l+ OnInspectorGUI()\l- OnEnable()\l- AddBoneFollowerGameObject()\l- ValidateAddBoneFollowerGame\lObject()\l- DrawPointsInSkin()\l- DrawPointAttachmentWithLabel()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Editor\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -targetPointFollower" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{Spine.Unity.PointFollower\n|+ slotName\l+ pointAttachmentName\l+ followRotation\l+ followSkeletonFlip\l+ followSkeletonZPosition\l+ SkeletonRenderer\l+ SkeletonComponent\l+ IsValid\l- skeletonTransform\l- skeletonTransformIsParent\l- valid\l|+ Initialize()\l+ LateUpdate()\l- HandleRebuildRenderer()\l- UpdateReferences()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_point_follower.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{MonoBehaviour\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{IHasSkeletonRenderer\n|+ SkeletonRenderer\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_has_skeleton_renderer.html",tooltip="A Spine-Unity Component that holds a reference to a SkeletonRenderer."];
  Node6 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{IHasSkeletonComponent\n|+ SkeletonComponent\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_has_skeleton_component.html",tooltip="A Spine-Unity Component that holds a reference to an ISkeletonComponent."];
  Node7 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -point" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{Spine.PointAttachment\n|+ X\l+ Y\l+ Rotation\l~ x\l- y\l- rotation\l|+ PointAttachment()\l+ ComputeWorldPosition()\l+ ComputeWorldRotation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_point_attachment.html",tooltip="An attachment which is a single point and a rotation. This can be used to spawn projectiles,..."];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{Attachment\n|+ Name\l|+ ToString()\l# Attachment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_attachment.html",tooltip=" "];
  Node9 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +skeletonRenderer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{Spine.Unity.SkeletonRenderer\n|+ initialSkinName\l+ initialFlipX\l+ separatorSlotNames\l+ separatorSlots\l+ zSpacing\l+ useClipping\l+ immutableTriangles\l+ pmaVertexColors\l+ clearStateOnDisable\l+ tintBlack\l그리고 6개 더...\l+ SkeletonDataAsset\l+ GenerateMeshOverride\l+ CustomMaterialOverride\l+ CustomSlotMaterials\l+ Skeleton\l- initialFlipY\l- customMaterialOverride\l- customSlotMaterials\l- meshRenderer\l- meshFilter\l|+ SkeletonRendererDelegate()\l+ InstructionDelegate()\l+ SetMeshSettings()\l+ Awake()\l+ ClearState()\l+ EnsureMeshGeneratorCapacity()\l+ Initialize()\l+ LateUpdate()\l+ NewSpineGameObject\< T \>()\l+ AddSpineComponent\< T \>()\l- OnDisable()\l- OnDestroy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_renderer.html",tooltip="Renders a skeleton."];
  Node4 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{ISkeletonComponent\n|+ SkeletonDataAsset\l+ Skeleton\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_skeleton_component.html",tooltip="A Spine-Unity Component that manages a Spine.Skeleton instance, instantiated from a SkeletonDataAsset..."];
  Node11 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{IHasSkeletonDataAsset\n|+ SkeletonDataAsset\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_unity_1_1_i_has_skeleton_data_asset.html",tooltip="Holds a reference to a SkeletonDataAsset."];
  Node12 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +skeletonDataAsset" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{Spine.Unity.SkeletonData\lAsset\n|+ scale\l+ skeletonJSON\l+ fromAnimation\l+ toAnimation\l+ duration\l+ defaultMix\l+ controller\l+ IsLoaded\l|+ Clear()\l+ GetSkeletonData()\l+ FillStateData()\l+ GetAnimationStateData()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l~ InitializeWithData()\l~ GetAtlasArray()\l~ ReadSkeletonData()\l~ ReadSkeletonData()\l- Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_data_asset.html",tooltip=" "];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{ScriptableObject\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node14 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -stateData" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{Spine.AnimationStateData\n|+ SkeletonData\l+ DefaultMix\l~ defaultMix\l- animationToMixTime\l|+ AnimationStateData()\l+ SetMix()\l+ SetMix()\l+ GetMix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_animation_state_data.html",tooltip="Stores mix (crossfade) durations to be applied when AnimationState animations are changed."];
  Node15 -> Node14 [color="grey25",fontsize="10",style="solid",label=" ~skeletonData" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{Spine.SkeletonData\n|+ Name\l+ Bones\l+ Slots\l+ Skins\l+ DefaultSkin\l+ Events\l+ Animations\l+ IkConstraints\l+ TransformConstraints\l+ PathConstraints\l그리고 6개 더...\l~ name\l~ width\l~ version\l~ fps\l~ imagesPath\l- height\l- hash\l|+ FindBone()\l+ FindBoneIndex()\l+ FindSlot()\l+ FindSlotIndex()\l+ FindSkin()\l+ FindEvent()\l+ FindAnimation()\l+ FindIkConstraint()\l+ FindTransformConstraint()\l+ FindPathConstraint()\l+ FindPathConstraintIndex()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton_data.html",tooltip="Stores the setup pose and all of the stateless data for a skeleton."];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~animations" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{Spine.ExposedList\<\l Spine.Animation \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node17 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~pathConstraints" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{Spine.ExposedList\<\l Spine.PathConstraintData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node18 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~events" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{Spine.ExposedList\<\l Spine.EventData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node19 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~skins" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{Spine.ExposedList\<\l Spine.Skin \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node20 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~defaultSkin" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{Spine.Skin\n|+ Name\l+ Attachments\l~ name\l- attachments\l|+ Skin()\l+ AddAttachment()\l+ GetAttachment()\l+ FindNamesForSlot()\l+ FindAttachmentsForSlot()\l+ ToString()\l~ AttachAll()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skin.html",tooltip="Stores attachments by slot index and attachment name."];
  Node21 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~ikConstraints" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{Spine.ExposedList\<\l Spine.IkConstraintData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node22 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~transformConstraints" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{Spine.ExposedList\<\l Spine.TransformConstraint\lData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node23 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~slots" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{Spine.ExposedList\<\l Spine.SlotData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node24 -> Node15 [color="grey25",fontsize="10",style="solid",label=" ~bones" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{Spine.ExposedList\<\l Spine.BoneData \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node15 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -skeletonData" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 -> Node12 [color="grey25",fontsize="10",style="solid",label=" +atlasAssets" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{Spine.Unity.AtlasAsset\n|+ atlasFile\l+ materials\l+ IsLoaded\l|+ Clear()\l+ GetAtlas()\l+ GenerateMesh()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l+ CreateRuntimeInstance()\l- Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_atlas_asset.html",tooltip="Loads and stores a Spine atlas and list of materials."];
  Node13 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node26 -> Node25 [color="grey25",fontsize="10",style="solid",label=" #atlas" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 [label="{Spine.Atlas\n|- pages\l- regions\l|+ GetEnumerator()\l+ Atlas()\l+ Atlas()\l+ Atlas()\l+ FlipV()\l+ FindRegion()\l+ Dispose()\l- GetEnumerator()\l- Load()\l- ReadValue()\l- ReadTuple()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_spine_1_1_atlas.html",tooltip=" "];
  Node29 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -rendererBuffers" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{Spine.Unity.MeshRenderer\lBuffers\n|~ sharedMaterials\l|+ Initialize()\l+ GetUpdatedSharedMaterials\lArray()\l+ MaterialsChangedInLastUpdate()\l+ UpdateSharedMaterials()\l+ GetNextMesh()\l+ Clear()\l+ Dispose()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_mesh_renderer_buffers.html",tooltip=" "];
  Node30 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node30 [label="{IDisposable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node31 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -doubleBufferedMesh" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{Spine.Unity.DoubleBuffered\l\< Spine.Unity.MeshRendererBuffers.\lSmartMesh \>\n|- a\l- b\l- usingA\l|+ GetCurrent()\l+ GetNext()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_double_buffered.html",tooltip=" "];
  Node32 -> Node29 [color="grey25",fontsize="10",style="solid",label=" ~submeshMaterials" ,arrowhead="odiamond",fontname="Helvetica"];
  Node32 [label="{Spine.ExposedList\<\l Material \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node33 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -meshGenerator" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 [label="{Spine.Unity.MeshGenerator\n|+ VertexCount\l+ Buffers\l- meshBoundsMin\l- meshBoundsMax\l- meshBoundsThickness\l- submeshIndex\l- tempVerts\l- regionTriangles\l- normals\l- tangents\l- tempTanBuffer\l- BoundsMinDefault\l- BoundsMaxDefault\l- AttachmentVerts\l- AttachmentUVs\l- AttachmentColors32\l- AttachmentIndices\l|+ MeshGenerator()\l+ Begin()\l+ AddSubmesh()\l+ BuildMesh()\l+ BuildMeshWithArrays()\l+ ScaleVertexData()\l+ FillVertexData()\l+ FillLateVertexData()\l+ FillTriangles()\l+ FillTrianglesSingle()\l+ EnsureVertexCapacity()\l+ TrimExcess()\l+ GenerateSingleSubmeshInstruction()\l+ GenerateSkeletonRenderer\lInstruction()\l+ TryReplaceMaterials()\l+ FillMeshLocal()\l+ FillMeshLocal()\l~ SolveTangents2DEnsureSize()\l~ SolveTangents2DTriangles()\l~ SolveTangents2DBuffer()\l- AddAttachmentTintBlack()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_mesh_generator.html",tooltip=" "];
  Node34 -> Node33 [color="grey25",fontsize="10",style="solid",label=" -clipper" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 [label="{Spine.SkeletonClipping\n|+ ClippedVertices\l+ ClippedTriangles\l+ ClippedUVs\l+ IsClipping\l|+ ClipStart()\l+ ClipEnd()\l+ ClipEnd()\l+ ClipTriangles()\l~ Clip()\l- MakeClockwise()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton_clipping.html",tooltip=" "];
  Node35 -> Node34 [color="grey25",fontsize="10",style="solid",label=" ~clipAttachment" ,arrowhead="odiamond",fontname="Helvetica"];
  Node35 [label="{Spine.ClippingAttachment\n|+ EndSlot\l|+ ClippingAttachment()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$class_spine_1_1_clipping_attachment.html",tooltip=" "];
  Node47 -> Node33 [color="grey25",fontsize="10",style="solid",label=" -uv2\n-uv3\n-uvBuffer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node47 [label="{Spine.ExposedList\<\l Vector2 \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node43 -> Node33 [color="grey25",fontsize="10",style="solid",label=" -submeshes" ,arrowhead="odiamond",fontname="Helvetica"];
  Node43 [label="{Spine.ExposedList\<\l Spine.ExposedList\<\l int \> \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node48 -> Node33 [color="grey25",fontsize="10",style="solid",label=" -vertexBuffer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node48 [label="{Spine.ExposedList\<\l Vector3 \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node49 -> Node33 [color="grey25",fontsize="10",style="solid",label=" -colorBuffer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node49 [label="{Spine.ExposedList\<\l Color32 \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node50 -> Node33 [color="grey25",fontsize="10",style="solid",label=" +settings" ,arrowhead="odiamond",fontname="Helvetica"];
  Node50 [label="{Spine.Unity.MeshGenerator.\lSettings\n|+ useClipping\l+ zSpacing\l+ pmaVertexColors\l+ tintBlack\l+ calculateTangents\l+ addNormals\l+ immutableTriangles\l+ Default\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_spine_1_1_unity_1_1_mesh_generator_1_1_settings.html",tooltip=" "];
  Node51 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +skeleton" ,arrowhead="odiamond",fontname="Helvetica"];
  Node51 [label="{Spine.Skeleton\n|+ Data\l+ Bones\l+ UpdateCacheList\l+ Slots\l+ DrawOrder\l+ IkConstraints\l+ PathConstraints\l+ TransformConstraints\l+ Skin\l+ R\l그리고 9개 더...\l~ r\l~ time\l~ flipX\l~ x\l- g\l- b\l- a\l- flipY\l- y\l|+ Skeleton()\l+ UpdateCache()\l+ UpdateWorldTransform()\l+ SetToSetupPose()\l+ SetBonesToSetupPose()\l+ SetSlotsToSetupPose()\l+ FindBone()\l+ FindBoneIndex()\l+ FindSlot()\l+ FindSlotIndex()\l그리고 10개 더...\l- SortIkConstraint()\l- SortPathConstraint()\l- SortTransformConstraint()\l- SortPathConstraintAttachment()\l- SortPathConstraintAttachment()\l- SortBone()\l- SortReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_skeleton.html",tooltip=" "];
  Node15 -> Node51 [color="grey25",fontsize="10",style="solid",label=" ~data" ,arrowhead="odiamond",fontname="Helvetica"];
  Node52 -> Node51 [color="grey25",fontsize="10",style="solid",label=" ~bones\n~updateCacheReset" ,arrowhead="odiamond",fontname="Helvetica"];
  Node52 [label="{Spine.ExposedList\<\l Spine.Bone \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node53 -> Node51 [color="grey25",fontsize="10",style="solid",label=" ~ikConstraints" ,arrowhead="odiamond",fontname="Helvetica"];
  Node53 [label="{Spine.ExposedList\<\l Spine.IkConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node54 -> Node51 [color="grey25",fontsize="10",style="solid",label=" ~updateCache" ,arrowhead="odiamond",fontname="Helvetica"];
  Node54 [label="{Spine.ExposedList\<\l Spine.IUpdatable \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node20 -> Node51 [color="grey25",fontsize="10",style="solid",label=" ~skin" ,arrowhead="odiamond",fontname="Helvetica"];
  Node55 -> Node51 [color="grey25",fontsize="10",style="solid",label=" ~pathConstraints" ,arrowhead="odiamond",fontname="Helvetica"];
  Node55 [label="{Spine.ExposedList\<\l Spine.PathConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node56 -> Node51 [color="grey25",fontsize="10",style="solid",label=" ~slots\n~drawOrder" ,arrowhead="odiamond",fontname="Helvetica"];
  Node56 [label="{Spine.ExposedList\<\l Spine.Slot \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node57 -> Node51 [color="grey25",fontsize="10",style="solid",label=" ~transformConstraints" ,arrowhead="odiamond",fontname="Helvetica"];
  Node57 [label="{Spine.ExposedList\<\l Spine.TransformConstraint \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node58 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -currentInstructions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node58 [label="{Spine.Unity.SkeletonRenderer\lInstruction\n|+ immutableTriangles\l|+ Clear()\l+ Dispose()\l+ SetWithSubset()\l+ Set()\l+ GeometryNotEqual()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_unity_1_1_skeleton_renderer_instruction.html",tooltip=" "];
  Node59 -> Node58 [color="grey25",fontsize="10",style="solid",label=" +submeshInstructions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node59 [label="{Spine.ExposedList\<\l Spine.Unity.SubmeshInstruction \>\n|+ Items\l+ Count\l+ Capacity\l- version\l- DefaultCapacity\l- EmptyArray\l|+ ExposedList()\l+ ExposedList()\l+ ExposedList()\l+ Add()\l+ GrowIfNeeded()\l+ Resize()\l+ EnsureCapacity()\l+ AddRange()\l+ BinarySearch()\l+ BinarySearch()\l그리고 42개 더...\l~ ExposedList()\l- CheckRange()\l- AddCollection()\l- AddEnumerable()\l- FindAllList()\l- GetIndex()\l- GetLastIndex()\l- GetEnumerator()\l- GetEnumerator()\l- Shift()\l- CheckIndex()\l- CheckCollection()\l- InsertCollection()\l- InsertEnumeration()\l- CheckMatch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_exposed_list.html",tooltip=" "];
  Node60 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -bone" ,arrowhead="odiamond",fontname="Helvetica"];
  Node60 [label="{Spine.Bone\n|+ yDown\l+ Data\l+ Skeleton\l+ Parent\l+ Children\l+ X\l+ Y\l+ Rotation\l+ ScaleX\l+ ScaleY\l+ ShearX\l그리고 20개 더...\l~ x\l~ ax\l~ appliedValid\l~ a\l~ c\l~ sorted\l- y\l- rotation\l- scaleX\l- scaleY\l- shearX\l- shearY\l- ay\l- arotation\l- ascaleX\l- ascaleY\l그리고 6개 더...\l|+ Bone()\l+ Update()\l+ UpdateWorldTransform()\l+ UpdateWorldTransform()\l+ SetToSetupPose()\l+ WorldToLocal()\l+ LocalToWorld()\l+ WorldToLocalRotation()\l+ LocalToWorldRotation()\l+ RotateWorld()\l+ ToString()\l~ UpdateAppliedTransform()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_bone.html",tooltip="Stores a bone's current pose."];
  Node61 -> Node60 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node61 [label="{IUpdatable\n||+ Update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_spine_1_1_i_updatable.html",tooltip=" "];
  Node52 -> Node60 [color="grey25",fontsize="10",style="solid",label=" ~children" ,arrowhead="odiamond",fontname="Helvetica"];
  Node38 -> Node60 [color="grey25",fontsize="10",style="solid",label=" ~data" ,arrowhead="odiamond",fontname="Helvetica"];
  Node38 [label="{Spine.BoneData\n|+ Index\l+ Name\l+ Parent\l+ Length\l+ X\l+ Y\l+ Rotation\l+ ScaleX\l+ ScaleY\l+ ShearX\l+ ShearY\l+ TransformMode\l~ index\l~ name\l~ length\l~ x\l~ transformMode\l- y\l- rotation\l- scaleX\l- scaleY\l- shearX\l- shearY\l|+ BoneData()\l+ ToString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_spine_1_1_bone_data.html",tooltip=" "];
  Node38 -> Node38 [color="grey25",fontsize="10",style="solid",label=" ~parent" ,arrowhead="odiamond",fontname="Helvetica"];
  Node51 -> Node60 [color="grey25",fontsize="10",style="solid",label=" ~skeleton" ,arrowhead="odiamond",fontname="Helvetica"];
  Node60 -> Node60 [color="grey25",fontsize="10",style="solid",label=" ~parent" ,arrowhead="odiamond",fontname="Helvetica"];
}
